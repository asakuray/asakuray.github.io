<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/play-jekyll2/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/play-jekyll2/" rel="alternate" type="text/html" /><updated>2017-11-12T23:29:32+09:00</updated><id>http://localhost:4000/play-jekyll2/</id><title type="html">Black Lotus</title><subtitle>(Ｔ),Black Lotusを生け贄に捧げる：あなたのマナ・プールに、好きな色１色のマナ３点を加える。</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/play-jekyll2/jekyll/update/2017/11/12/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-11-12T00:49:12+09:00</published><updated>2017-11-12T00:49:12+09:00</updated><id>http://localhost:4000/play-jekyll2/jekyll/update/2017/11/12/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/play-jekyll2/jekyll/update/2017/11/12/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">GiHub PagesによるJekyllブログをProject siteとして作る</title><link href="http://localhost:4000/play-jekyll2/2017/11/12/blogging-with-minima.html" rel="alternate" type="text/html" title="GiHub PagesによるJekyllブログをProject siteとして作る" /><published>2017-11-12T00:49:12+09:00</published><updated>2017-11-12T00:49:12+09:00</updated><id>http://localhost:4000/play-jekyll2/2017/11/12/blogging-with-minima</id><content type="html" xml:base="http://localhost:4000/play-jekyll2/2017/11/12/blogging-with-minima.html">&lt;h2 id=&quot;はじめに&quot;&gt;はじめに&lt;/h2&gt;
&lt;p&gt;GitHub Pagesは、リポジトリ内にHTMLコンテンツ(またはJekyllプロジェクト)を設置すると静的サイトを公開できるという、GitHubのいち機能である。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yourid/yourid.github.io&lt;/code&gt; リポジトリで用意したGitHub Pagesは &lt;code class=&quot;highlighter-rouge&quot;&gt;http://yourid.github.io&lt;/code&gt; に公開される。ここで &lt;code class=&quot;highlighter-rouge&quot;&gt;http://yourid.github.io&lt;/code&gt; をUser siteと呼ぶ。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;yourid/reponame&lt;/code&gt; リポジトリで用意したGitHub Pagesは &lt;code class=&quot;highlighter-rouge&quot;&gt;http://yourid.github.io/reponame&lt;/code&gt; に公開される。ここで &lt;code class=&quot;highlighter-rouge&quot;&gt;http://yourid.github.io/reponame&lt;/code&gt; を &lt;code class=&quot;highlighter-rouge&quot;&gt;yourid/reponame&lt;/code&gt; のProject siteと呼ぶ。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は Project site としてJekyllでブログを作成してみる。
テーマとしてはデフォルトのminimaを用いる。&lt;/p&gt;

&lt;h2 id=&quot;作業手順&quot;&gt;作業手順&lt;/h2&gt;

&lt;p&gt;まず、雛形を生成する。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;jekyll new play-jekyll2
cd play-jekyll2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;play-jekyll2&lt;/code&gt; ディレクトリをGitリポジトリとして&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;し、GitHubにも作成しておこう。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git init
hub create
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;ブラウザで動作確認する。ポートは4000番。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;サブパスを設定&quot;&gt;サブパスを設定&lt;/h2&gt;

&lt;p&gt;User siteならばこの時点で何もせずpushしてしまえば良い。だがProject siteの場合は、それではURLのパスがずれてしまう。&lt;/p&gt;

&lt;p&gt;Project siteの場合、&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; で &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl:&lt;/code&gt; の設定を行えばよい。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;baseurl: /play-jekyll2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;push&quot;&gt;push&lt;/h2&gt;

&lt;p&gt;あらかじめGitHubリポジトリの設定で、GitHub Pagesを有効化する(今回はmasterブランチとして有効化した)。&lt;/p&gt;

&lt;p&gt;リポジトリにコミットされるごとに、JekyllのビルドをGitHub側が行ってくれて便利である。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .; git commit -m 'update'; git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;しばし待てば&lt;a href=&quot;https://kuronat.github.io/play-jekyll2/&quot;&gt;Project site&lt;/a&gt;にJekyllブログが作成されたことが確認できるだろう。&lt;/p&gt;

&lt;h2 id=&quot;テーマ編集&quot;&gt;テーマ編集&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;open $(bundle show minima)&lt;/code&gt; の内容をリポジトリのディレクトリにコピーする。&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; から &lt;code class=&quot;highlighter-rouge&quot;&gt;theme: minima&lt;/code&gt; を削る。&lt;/li&gt;
  &lt;li&gt;動作確認をローカルで行いながら、HTMLやCSSを編集する。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;雑感&quot;&gt;雑感&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;テーマいじりはAtomが便利&lt;/li&gt;
  &lt;li&gt;minimaデフォルトから要らないものを削ったらイイ感じになった
    &lt;ul&gt;
      &lt;li&gt;本リポジトリのコミットログを参照のこと&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;やったこと
    &lt;ul&gt;
      &lt;li&gt;フッタを2カラムにした&lt;/li&gt;
      &lt;li&gt;ヘッダからAboutを削った&lt;/li&gt;
      &lt;li&gt;ホームから細々としたものを削った&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考文献&quot;&gt;参考文献&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://sonson.jp/blog/2015/01/17/githubpages/&quot;&gt;Github Pagesで独自ドメイン+プライベートリポジトリもおｋ&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">はじめに GitHub Pagesは、リポジトリ内にHTMLコンテンツ(またはJekyllプロジェクト)を設置すると静的サイトを公開できるという、GitHubのいち機能である。</summary></entry></feed>